i=1:10
z <- 5:7
print("hello world")
getwd()
setwd()
getwd()
getwd()
setwd("C:/Users/angel/Desktop/Programacion/udemy/Machine learning/mis codigos/16")
#k - fold cross validation
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
View(dataset)
#k - fold cross validation
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(e1071)
classifier = svm(formula = Purchased ~ .,data = training_set, type = "C-classification", kernel = "radial")
y_pred = predict(classifier, newdata = testing_set[,-3])
cm = table(testing_set[,3], y_pred)
#Aplicar algoritmo de k-fold cross validation
#install.packages("caret")
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds ,function(x) {
training_fold = training_set[-x,]
test_fold = training_set[x,]
classifier = svm(formula = Purchased ~ .,data = training_fold, type = "C-classification", kernel = "radial")
y_pred = predict(classifier, newdata = test_fold[,-3])
cm = table(test_fold[,3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[1,2]+cm[2,1]+cm[2,2])
return(accuracy)
} )
View(cv)
mean(as.numeric(cv))
sd(as.numeric(cv))
#k - fold cross validation
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(e1071)
classifier = svm(formula = Purchased ~ .,data = training_set, type = "C-classification", kernel = "radial")
y_pred = predict(classifier, newdata = testing_set[,-3])
cm = table(testing_set[,3], y_pred)
#Aplicar algoritmo de k-fold cross validation
#install.packages("caret")
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds ,function(x) {
training_fold = training_set[-x,]
test_fold = training_set[x,]
classifier = svm(formula = Purchased ~ .,data = training_fold, type = "C-classification", kernel = "radial")
y_pred = predict(classifier, newdata = test_fold[,-3])
cm = table(test_fold[,3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[1,2]+cm[2,1]+cm[2,2])
return(accuracy)
} )
mean(as.numeric(cv))
sd(as.numeric(cv))
classifier = train(form = Purchased ~ .,data = training_set, method = 'svmRadial')
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
dataset$Purchased = factor(dataset$Purchased)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(caret)
classifier = train(form = Purchased ~ .,data = training_set, method = 'svmRadial')
classifier$bestTune
