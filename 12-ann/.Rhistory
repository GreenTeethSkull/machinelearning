i=1:10
z <- 5:7
print("hello world")
getwd()
setwd()
getwd()
getwd()
setwd("C:/Users/angel/Desktop/Programacion/udemy/6")
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[,2:3]
install.packages("randomForest")
library(randomForest)
?randomForest
dataset[1]
set.seed(1234)
regression = randomForest(x = dataset[1], y = dataset$Salary, ntree = 10)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x =  dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid,y = predict(regression, newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Prediccion del sueldo en funcion del nivel") +
xlab("Nivel del empleado") +
ylab("Sueldo en $")
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x =  dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid,y = predict(regression, newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Prediccion del sueldo en funcion del nivel") +
xlab("Nivel del empleado") +
ylab("Sueldo en $")
regression = randomForest(x = dataset[1], y = dataset$Salary, ntree = 100)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x =  dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid,y = predict(regression, newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Prediccion del sueldo en funcion del nivel") +
xlab("Nivel del empleado") +
ylab("Sueldo en $")
regression = randomForest(x = dataset[1], y = dataset$Salary, ntree = 300)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x =  dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid,y = predict(regression, newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Prediccion del sueldo en funcion del nivel") +
xlab("Nivel del empleado") +
ylab("Sueldo en $")
setwd("C:/Users/angel/Desktop/Programacion/udemy/Machine learning/mis codigos/12")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[, 4:14]
# Codificar los facotres para la RNA
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c("France","Spain","Germany"), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c("Female","Male"), labels = c(0,1)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:10] = scale(training_set[,1:10])
testing_set[,1:10] = scale(testing_set[,1:10])
View(training_set)
#Crear la red Neuronal
install.packages("h2o")
#Crear la red Neuronal
#install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",training_frame = training_set, activation = "Rectifier",hidden = c(6,6),epochs = 100,train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = "Exited",training_frame = as.h2o(training_set), activation = "Rectifier",hidden = c(6,6),epochs = 100,train_samples_per_iteration = -2)
#Prediccion de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = testing_set[,-11])
#Prediccion de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred>0.5,1,0)
#Crear la matriz de confusi贸n
cm = table(testing_set[,11], y_pred)
View(y_pred)
y_pred = as.vector(y_pred)
#Crear la matriz de confusi贸n
cm = table(testing_set[,11], y_pred)
cm
#Cerrar la sesi贸n de H2O
h2o.shutdown()
#Cerrar la sesi贸n de H2O
h2o.shutdown()
